import numpy as np

def analyze_series(series, p):
    """
    Analyzes a time series for mean, variance, local maxima, minima, and moving average.

    Parameters:
    series (list or np.array): The time series data.
    p (int): Window size for the moving average.

    Returns:
    dict: Dictionary containing the mean, variance, local maxima, local minima, and moving average of the series.
    """
    # Convert series to numpy array for easier manipulation
    series = np.array(series)
    mean = np.mean(series)
    variance = np.var(series)

    # Finding local maxima and minima
    local_maxima = np.where((series[:-2] < series[1:-1]) & (series[1:-1] > series[2:]))[0] + 1
    local_minima = np.where((series[:-2] > series[1:-1]) & (series[1:-1] < series[2:]))[0] + 1

    # Compute moving average
    moving_average = np.convolve(series, np.ones(p)/p, mode='valid')

    return {
        "mean": mean,
        "variance": variance,
        "local_maxima": local_maxima,
        "local_minima": local_minima,
        "moving_average": moving_average
    }

def test_analyze_series():
    series = [1, 3, 2, 5, 4, 6, 5, 8, 7, 9, 8, 10]
    results = analyze_series(series, 3)
    
    print("Mean:", results["mean"])
    print("Variance:", results["variance"])
    print("Local Maxima:", results["local_maxima"])
    print("Local Minima:", results["local_minima"])
    print("Moving Average:", results["moving_average"])

    assert np.isclose(results["mean"], np.mean(series)), "Mean test failed"
    assert np.isclose(results["variance"], np.var(series)), "Variance test failed"
    assert np.array_equal(results["local_maxima"], [3, 5, 7, 9]), "Local maxima test failed"
    assert np.array_equal(results["local_minima"], [2, 4, 6, 8]), "Local minima test failed"
    assert np.allclose(results["moving_average"], [2.0, 3.33333333, 4.0, 5.0, 5.66666667, 6.33333333, 7.0, 8.0]), "Moving average test failed"

    print("All tests passed!")

# Run the test function
test_analyze_series()
