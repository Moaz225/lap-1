import numpy as np

def binarize(M, threshold=0.5):
    """
    Binarizes a matrix based on a given threshold.

    Parameters:
    M (np.array): Input matrix.
    threshold (float): Threshold value for binarization.

    Returns:
    np.array: Binarized matrix.
    """
    return np.where(M > threshold, 1, 0)

def test_binarize():
    # Test 1: Simple case
    M1 = np.array([[0.6, 0.4], [0.7, 0.3]])
    expected1 = np.array([[1, 0], [1, 0]])
    assert np.array_equal(binarize(M1), expected1), "Test 1 Failed"

    # Test 2: All elements below threshold
    M2 = np.array([[0.1, 0.2], [0.3, 0.4]])
    expected2 = np.array([[0, 0], [0, 0]])
    assert np.array_equal(binarize(M2), expected2), "Test 2 Failed"

    # Test 3: All elements above threshold
    M3 = np.array([[0.6, 0.7], [0.8, 0.9]])
    expected3 = np.array([[1, 1], [1, 1]])
    assert np.array_equal(binarize(M3, 0.5), expected3), "Test 3 Failed"

    # Test 4: Threshold at 0
    M4 = np.array([[0, -1], [-0.5, 0.5]])
    expected4 = np.array([[1, 0], [0, 1]])
    assert np.array_equal(binarize(M4, 0), expected4), "Test 4 Failed"

    print("All tests passed!")

# Run the tests
test_binarize()
