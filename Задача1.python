import numpy as np

def sum_prod(X, V):
    """
    Calculates the sum of products of matrices and vectors.
    
    Parameters:
    X (list of np.array): List of (n, n) numpy matrices.
    V (list of np.array): List of (n, 1) numpy vectors.
    
    Returns:
    np.array: Resulting vector after summing the matrix-vector products.
    """
    result = np.zeros(V[0].shape)
    for matrix, vector in zip(X, V):
        result += np.dot(matrix, vector)
    return result

def test_sum_prod():
    # Test 1: Simple identity matrix with a single vector
    X1 = [np.array([[1, 0], [0, 1]])]
    V1 = [np.array([[1], [2]])]
    assert np.allclose(sum_prod(X1, V1), np.array([[1], [2]])), "Test 1 Failed"

    # Test 2: Two matrices and vectors
    X2 = [np.array([[1, 0], [0, 1]]), np.array([[2, 0], [0, 2]])]
    V2 = [np.array([[1], [2]]), np.array([[3], [4]])]
    assert np.allclose(sum_prod(X2, V2), np.array([[7], [10]])), "Test 2 Failed"

    # Test 3: Zero matrices
    X3 = [np.zeros((2, 2)), np.zeros((2, 2))]
    V3 = [np.array([[1], [2]]), np.array([[3], [4]])]
    assert np.allclose(sum_prod(X3, V3), np.zeros((2, 1))), "Test 3 Failed"

    print("All tests passed!")

# Run the tests
test_sum_prod()
